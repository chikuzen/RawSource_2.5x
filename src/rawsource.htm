<html>
<head>
<title>RawSource</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>
<body bgcolor="#BED8CB" text="#000000">
<h1>RawSource</h1>
<h3>Loading raw video data from files</h3>
<p>for AviSynth 2.5x<br>
</p>
<p><code>RawSource</code> (<var>string &quot;file&quot;, int &quot;widht&quot;, 
  int &quot;height&quot;, string &quot;pixel_type&quot;, int &quot;fpsnum&quot;, 
  int &quot;fpsden&quot;, string &quot;index&quot;, bool &quot;show&quot;</var>)<br>
</p>
<p> RawSource opens a video file which contains 8bit YUV422, YUV411, YUV420,
 Y8, or RGB video data.<br>
  There are three ways how the positions of the video frame data are calculated:</p>
<ul>
  <li>a YUV4MPEG2-header is found, width/height/framerate/pixeltype/fieldorder
  is set according to the header data. Only fixed-length FRAME headers are supported.</li>
  <li>width, height, pixel_type, framerate(fpsnum and fpsden) is given as arguments.
  Then the positions are calculated assuming that only video data is in the file.</li>
  <li>an &quot;index&quot; string (or file) is given together with width, height, 
    pixel_type, fpsnum, fpsden. The index string can contain all or partial positions of the frames.</li>
</ul>
<p>Supported <var>pixel_type</var>s are:<br>
  &nbsp;&nbsp;RGB, RGBA, BGR, BGRA, ARGB, ABGR (interleaved RGB without subsampling, resulting 
  in AviSynth's RGB24 or RGB32)<br>
  &nbsp;&nbsp;YUY2(YUYV), YVYU, UYVY, VYUY (interleaved horizontally subsampled resulting 
  in AviSynth's YUY2)<br>
  &nbsp;&nbsp;I422, YV16 (planar horizontally subsampled, it is converted to AviSynth's 
  YUY2)<br>
  &nbsp;&nbsp;I420(IYUV), YV12 (planar horizontally and vertically subsampled resulting 
  in AviSynth's YV12)<br>
  &nbsp;&nbsp;NV12, NV21 (planar horizontally and vertically subsampled resulting
  in AviSynth's YV12)<br>
  &nbsp;&nbsp;I411(Y41B), YV411 (planar horizontally subsampled, it is converted to AviSynth's 
  YUY2 without chroma interpolation)<br>
  &nbsp;&nbsp;Y8(GRAY) (luma only resulting in AviSynth's YV12 grey, 
  waiting for Avisynth 2.6 with native Y8 support)
  </p>
<p>Maximal <var>width</var> is 4096.<br>
  If you don't specified fpsnum and/or fpsden, framerate is fixed to 25/1fps.</p>
<p>With <var>show</var>=true the actually used byteposition for that frame is displayed, 
  followed by:<br>
  &nbsp;K = position given in index is used<br>
  &nbsp;D = position by adding current delta is used<br>
  &nbsp;B = position by adding currend big_delta is used</p>
<h4><b>Some simple examples:</b></h4>
<table width="75%" border="1">
  <tr> 
    <td> 
      <pre>RawSource(&quot;d:\yuv4mpeg.yuv&quot;)  #this assumes there is a valid YUV4MPEG2-header inside.
                              #If not, default values are used:
                                width=720, height=576, pixel_type=&quot;YUY2&quot;, fpsnum=25, fpsden=1</pre>
    </td>
  </tr>
</table>
<br>
<table width="75%" border="1">
  <tr> 
    <td> 
      <pre>RawSource(&quot;d:\src6_625.raw&quot;,720,576,&quot;BGRA&quot;) # really a raw file<br>                                            # if you are unsure about the pixel_type, simply try out all possible values.</pre>
    </td>
  </tr>
</table>
<h4><b>Using an index-string:</b></h4>
<p>You can enter the byte positions of the video frames directly.</p>
<table width="75%" border="1">
  <tr> 
    <td> 
      <pre>RawSource(&quot;d:\yuv.mov&quot;,720,576,&quot;UYVY&quot;, index=&quot;0:192512 1:1021952 25:21120512 50:42048512 75:62976512&quot;)</pre>
    </td>
  </tr>
</table>
<p>This is useful if it's not really raw video, but e.g. uncompressed MOV files 
  or a file with some kind of header.<br>
  It will work whenever the spacing of the frames is fixed or has at least two 
  fixed intervalls (e.g. audio data interleaved with the video every 25th frame).<br>
  You enter pairs of <tt>framenumber:byteposition</tt>.<br>
  Internally there are two step values (for the byte positions): <var>delta</var> 
  and <var>big_delta</var>.<br>
  <var>delta</var> is stored everytime when <font color="#0033FF">two adjacent framenumbers</font> 
  are given, the default value is width*height*bytes_per_pixel.<br>
  <var>big_delta</var> is stored, when <font color="#0033FF">three framenumbers with 
  the same two intervals</font> are given. The default value is 0 (meaning there 
  is no useful <var>big_delta</var> present)..<br>
  If those conditions are not met, the internal values of delta and big_delta 
  is not updated, only the given bytepositions in the index are used.<br>
  <var>big_delta</var> is reset to 0 if the resulting position would be behind the 
  given one (see beyond).</p>
<p>Here are some possible cases:</p>
<table width="75%" border="1">
  <tr valign="top"> 
    <td width="11%"> 
      <pre>  0:    0</pre>
    </td>
    <td width="89%"> 
      <pre>frame 0 starts at byte 0, step to frame 1 is default = width*height*bytes_per_pixel</pre>
    </td>
  </tr>
  <tr valign="top"> 
    <td width="11%"> 
      <pre>  0:10000</pre>
    </td>
    <td width="89%"> 
      <pre>frame 0 starts at 10000</pre>
    </td>
  </tr>
  <tr valign="top"> 
    <td width="11%"> 
      <pre>  0: 5000
  1:15000</pre>
    </td>
    <td width="89%"> 
      <pre>frame 0 at 5000
frame 1 at 15000 (delta is set to 10000)
frame 2 at 25000 (using delta)
frame 3 at 35000 (using delta)</pre>
    </td>
  </tr>
  <tr valign="top"> 
    <td width="11%"> 
      <pre>  0:  5000
  1: 15000


<br> 25:290000


 50:590000



 75:890000</pre>
    </td>
    <td width="89%"> 
      <pre>frame 0 at 5000
frame 1 at 15000 (delta=10000)
frame 2 at 25000
...
frame 25 at 290000 (using entry instead of delta which would be at 255000)
frame 26 at 300000 (still using delta)
...
frame 50 at 590000 (using entry instead of delta)
&gt;&gt; because 25...50 = 50...75 now big_delta is set to 300000 (590000-290000)
frame 51 at 600000 (still using delta)
...
frame 75 at 890000 (using entry which is the same as using big_delta)
... 
frame 100 at 1190000 (using big_delta)
frame 101 at 1200000 (using delta)<br>...<br>frame 125 at 1490000 (using big_delta)</pre>
    </td>
  </tr>
  <tr valign="top"> 
    <td width="11%"> 
      <pre>  0:  5000
  1: 15000
 25:290000
 50:590000
 75:890000<br>
100:950000</pre>
    </td>
    <td width="89%"> 
      <pre>the same as in the previous example<br><br><br><br>frame 75 at 890000<br>&gt;&gt; because 890000+300000 &gt; 950000 now big_delta is reset to 0.<br>frame 100 at 950000<br>frame 101 at 960000 (using delta)<br>...<br>frame 125 at 1200000 (there is NO big_delta)</pre>
    </td>
  </tr>
</table>
<p>The index string is treated as a filename, if there is an &quot;.&quot; inside. 
  The data is then read from that file, line breaks don't matter.</p>
<h4><b>Finding those byte positions:</b></h4>
<p>With <font color="#0033FF">yuvscan.exe</font> you can try to analyze files 
  which contain YUV-data with only valid luma and chroma data (~16-240).<br>
  The program searches for big uninterrupted blocks without bytes &lt; 16 or &gt;240 
  and generates a &quot;index.txt&quot;-file, which can be used directly with 
  rawsource (if you are really lucky, at least).<br>
  It's only a command line version, you can change the default parameters. If 
  you know the height and width of the data, the output will be much better.</p>
<p><u>Usage:</u><br>
  <tt>yuvscan.exe filename triggerlength threshold round_by_bytes</tt><br>
  <br>
  <tt>triggerlength</tt>: how long must one frame be (in bytes)<br>
  <tt>threshold</tt>: what are considered valid YUV data (default 10, which means 
  10 ... 255-10)<br>
  <tt>round_by_bytes</tt>: as most data is stored at nice positions, the output 
  can be rounded. default 9 which means 2^9 = $100</p>
<p>&nbsp;</p>
<h4>Ernst Pech&eacute;, 2005-10-13</h4>
Version 2006-07-28 - Added Y8 support (by Fizick,  http://avisynth.org.ru)<br>
Version 2011-05-21 - Added YV411/I411 support (by Chikuzen,  http://github.com/chikuzen)<br>
Version 2011-05-23 - Added ABGR/NV12/NV21 support (by Chikuzen)<br>
Version 2011-05-29 - Change maximal width from 2880 to 4096. Added new parameters fpsnum/fpsden (by Chikuzen)
</body>
</html>
